//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GB.SIMEF.Entities
{
    using GB.SIMEF.Resources;
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.ComponentModel.DataAnnotations.Schema;
    using System.Text;

    [Table("Indicador")]
    public partial class Indicador
    {
     
        public Indicador()
        {

        }

        [Key]
        public int idIndicador { get; set; }
        public string Codigo { get; set; }
        public string Nombre { get; set; }
        public int IdTipoIndicador { get; set; }
        public int IdClasificacion { get; set; }
        public int idGrupo { get; set; }
        public string Descripcion { get; set; }
        public Nullable<int> CantidadVariableDato { get; set; }
        public Nullable<int> CantidadCategoriasDesagregacion { get; set; }
        public Nullable<int> IdUnidadEstudio { get; set; }
        public int idTipoMedida { get; set; }
        public int IdFrecuencia { get; set; }
        public Nullable<bool> Interno { get; set; }
        public Nullable<bool> Solicitud { get; set; }
        public string Fuente { get; set; }
        public string Notas { get; set; }
        public System.DateTime FechaCreacion { get; set; }
        public string UsuarioCreacion { get; set; }
        public Nullable<System.DateTime> FechaModificacion { get; set; }
        public string UsuarioModificacion { get; set; }
        public bool VisualizaSigitel { get; set; }
        public int idEstado { get; set; }

        #region Variables que no forman parte del contexto
        [NotMapped]
        public virtual ClasificacionIndicadores ClasificacionIndicadores { get; set; }
        [NotMapped]
        public virtual EstadoRegistro EstadoRegistro { get; set; }
        [NotMapped]
        public virtual FrecuenciaEnvio FrecuenciaEnvio { get; set; }
        [NotMapped]
        public virtual GrupoIndicadores GrupoIndicadores { get; set; }
        [NotMapped]
        public virtual TipoMedida TipoMedida { get; set; }
        [NotMapped]
        public virtual UnidadEstudio UnidadEstudio { get; set; }
        [NotMapped]
        public virtual TipoIndicadores TipoIndicadores { get; set; }
        [NotMapped]
        public string id { get; set; }
        [NotMapped]
        public int nuevoEstado { get; set; }
        [NotMapped]
        public bool esGuardadoParcial { get; set; }
        #endregion

        public override string ToString()
        {
            StringBuilder json = new StringBuilder();
            json.Append("{\"Código\":\"").Append(this.Codigo).Append("\",");
            json.Append("\"Nombre de indicador\":\"").Append(this.Nombre).Append("\",");
            json.Append("\"Tipo de indicador\":\"").Append(this.TipoIndicadores.Nombre).Append("\",");
            json.Append("\"Frecuencia\":\"").Append(this.FrecuenciaEnvio.Nombre).Append("\",");
            json.Append("\"Descripción\":\"").Append(this.Descripcion).Append("\",");
            json.Append("\"Clasificación\":\"").Append(this.ClasificacionIndicadores.Nombre).Append("\",");
            json.Append("\"Tipo de medida\":\"").Append(this.TipoMedida.Nombre).Append("\",");
            json.Append("\"Grupo\":\"").Append(this.GrupoIndicadores.Nombre).Append("\",");
            switch (this.Interno)
            {
                case true:
                    json.Append("\"Uso\":\"").Append(Constantes.UsosIndicador.interno).Append("\",");

                    break;
                case false:
                    json.Append("\"Uso\":\"").Append(Constantes.UsosIndicador.externo).Append("\",");

                    break;
            }
            json.Append("\"Fuente\":\"").Append(this.Fuente).Append("\",");
            json.Append("\"Cantidad de variables dato\":\"").Append(this.CantidadVariableDato).Append("\",");
            json.Append("\"Cantidad de categorías de segregación\":\"").Append(this.CantidadCategoriasDesagregacion).Append("\",");
            json.Append("\"Unidad de estudio\":\"").Append(this.UnidadEstudio.Nombre).Append("\",");
            switch (this.Solicitud)
            {
                case true:
                    json.Append("\"Solicitud\":\"").Append(Constantes.MostrarIndicadorEnSolicitud.si).Append("\",");

                    break;
                case false:
                    json.Append("\"Solicitud\":\"").Append(Constantes.MostrarIndicadorEnSolicitud.no).Append("\",");

                    break;
            }
            json.Append("\"Notas\":\"").Append(this.Notas).Append("\",");

            int.TryParse(Utilidades.Desencriptar(this.EstadoRegistro.id), out int objEstado);
            if (objEstado == 0) 
            {
                objEstado = this.idEstado;
            }


            switch (objEstado)
            {
                case (int)Constantes.EstadosRegistro.Desactivado:
                    json.Append("\"Estado\":\"").Append(Enum.GetName(typeof(Constantes.EstadosRegistro), (int)Constantes.EstadosRegistro.Desactivado)).Append("\"}");
                    break;
                case (int)Constantes.EstadosRegistro.Activo:
                    json.Append("\"Estado\":\"").Append(Enum.GetName(typeof(Constantes.EstadosRegistro), (int)Constantes.EstadosRegistro.Activo)).Append("\"}");
                    break;
                case (int)Constantes.EstadosRegistro.Eliminado:
                    json.Append("\"Estado\":\"").Append(Enum.GetName(typeof(Constantes.EstadosRegistro), (int)Constantes.EstadosRegistro.Eliminado)).Append("\"}");
                    break;
                case (int)Constantes.EstadosRegistro.EnProceso:
                    json.Append("\"Estado\":\"").Append(Enum.GetName(typeof(Constantes.EstadosRegistro), (int)Constantes.EstadosRegistro.EnProceso)).Append("\"}");
                    break;
            }




            string resultado = json.ToString();

            return resultado;
        }
    }
}

