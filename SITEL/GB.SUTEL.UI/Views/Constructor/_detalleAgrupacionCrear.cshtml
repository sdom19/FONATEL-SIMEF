@model GB.SUTEL.UI.Models.ConstructorViewModel
<div class="form-horizontal">
    <div class="form-group">
        <div class="col-md-10">
            <button type="button" onclick="funcBtnCrearNodo();" class="btn btn-success" id="btnAgregarNodo">Agregar</button>
            <button type="button" onclick="funcBtnEditarNodo();" class="btn btn-warning hidden" id="btnEditarNodo">Editar</button>
            <button type="button" onclick="funcBtnBorrarNodo();" class="btn btn-danger hidden" id="btnBorrarNodo">Borrar</button>
            <button type="button" onclick="funcBtnGuardarEditarNodo();" class="btn btn-success hidden" id="btnGuardarEditarNodo">Guardar</button>
            <button type="button" onclick="funcBtnCancelarEditarNodo();" class="btn btn-danger hidden" id="btnCancelarEditarNodo">Cancelar</button>
        </div>
        </div>


    <div class="form-group">
       
            @Html.Label("Detalle Agrupación", new { @class = "col-md-7" })
        <span class="input-group-btn">
            <button class="btn btn-primary glyphicon glyphicon-search" type="button" data-toggle="modal" title="Búsqueda de Detalles de Agrupación en el sistema"
                    data-target="#modalSeleccionarDetalleAgrupacion" id="btnBuscarDetalleAgrupacion"></button>
        </span>
       
    </div>


        <div class="form-group">
            <div class="col-md-10" id="divDetalleAgrupacion">
                <div class="input-group" style="width:350px;">
                    @Html.TextAreaFor(model => model.detalleAgrupacion.DescDetalleAgrupacion, new { @class = "form-control test", @placeholder = "Detalle Agrupación", @id = "descDetalleAgrupacion", disabled = false, @cols = "40", @rows = "4" })
                    @Html.HiddenFor(model => model.detalleAgrupacion.IdAgrupacion, new { @id = "IdAgrupacion" })
                    @Html.HiddenFor(model => model.detalleAgrupacion.Agrupacion.DescAgrupacion, new { @id = "descAgrupacion" })
                    @Html.HiddenFor(model => model.detalleAgrupacion.IdDetalleAgrupacion, new { @id = "IdDetalleAgrupacion" })
                    @Html.HiddenFor(model => model.detalleAgrupacion.IdOperador, new { @id = "idDetalleOperadorAgrupacion" })
                    @Html.Hidden("idPadreNodo", "")
                  
                    @Html.ValidationMessageFor(model => model.detalleAgrupacion.DescDetalleAgrupacion)
                </div>
            </div>
        </div>
    
   
    <div class="form-group">
      
        <div class="col-sm-10">
            <div class="checkbox">
                @Html.CheckBox("ckUltimoNivel", new { @id = "ckUltimoNivel" }) Último nivel
            </div>
        </div>
    </div>

 



    <div id="divRegla" class="hidden" >
        
        <div class="form-group">
            <div class="control-label col-md-2">
                <h4>Regla</h4>
            </div>
        </div>
            <div class="form-group">
                @Html.Label("Tipo Valor", new { @class = "col-md-5" })

               <div class="col-md-10">

                    @Html.DropDownListFor(model => model.idTipoValor,
                                               new SelectList(Model.listaTipoValor,
                                              "IdTipoValor", "Descripcion"),
                                                                        "Seleccione", new { @id = "ddlTipoValor", @class = "form-control" })


                </div>
            </div>

        @*  Regla automática o manual*@

        <div class="form-group"  id="contenedorRadioButtonsRegla">

            <div class="col-md-10">
                <div class="input-group" style="width:400px;">

                     
                            <label class="radio-inline">
                                @Html.RadioButton("rbGroupRegla", "otroValor", true, new { id = "rbManual", onchange = "rbManualChange(this);" })
                                @Html.Label("Regla Manual", new { id = "lbManual" })
                            </label>

                            <label class="radio-inline">
                                @Html.RadioButton("rbGroupRegla", "hello", false, new { id = "rbEstadistica", onchange="rbEstadisticaChange(this);" })
                                @Html.Label("Regla Estadística", new { id = "lbEstadistica" })
                            </label>                      
                    

                </div>
            </div>
        </div>


        <div class="form-group hidden" id="divMsjNoReglaAutomaticaDisponible">

            <div class="col-md-10">
                <div class="input-group" style="width:400px;">

                    <p><font color="red">Regla estadística no disponible.</font></p>

                </div>
            </div>
        </div>



        <div class="form-group hidden" id="divMensajeReglasMultiples">

            <div class="col-md-10">
                <div class="input-group" style="width:400px;">

                    <p><font color="green">Los valores inferiores y superiores serán agregados.</font></p>

                </div>
            </div>
        </div>

        

            <div class="form-group hidden" id="divReglaValorLimiteInferior">
              
                
                    @Html.LabelFor(model => model.regla.ValorLimiteInferior, new { @class = "col-md-6" })
               
                 
                    <div class="col-md-10">

                        <div class="input-group" style="width:100%;">
                            @Html.EditorFor(model => model.regla.ValorLimiteInferior, new { htmlAttributes = new { @class = "form-control", @placeholder = "valor", @id = "txtReglaInferior" } })
                            @Html.EditorFor(model => model.regla.ValorLimiteInferior, new { htmlAttributes = new { @class = "form-control hidden", @placeholder = "valor", @id = "txtReglaInferior2", @readonly = "readonly" } })
                            @Html.EditorFor(model => model.regla.ValorLimiteInferior, new { htmlAttributes = new { @class = "form-control hidden", @placeholder = "valor", @id = "txtReglaInferior3", @onkeypress = "return soloNumeros(event);", @maxlength = "11" } })
                            @Html.EditorFor(model => model.regla.ValorLimiteInferior, new { htmlAttributes = new { @class = "form-control hidden", @placeholder = "valor", @id = "txtReglaInferior4", @onkeypress = "return soloNumerosDecimales(event);", @maxlength = "11" } })

                            @Html.ValidationMessageFor(model => model.regla.ValorLimiteSuperior)

                        </div>
                    </div>



                </div>


        <div class="form-group hidden" id="divReglaValorLimiteSuperior">
           
                @Html.LabelFor(model => model.regla.ValorLimiteSuperior, new { @class = "col-md-6" })
            

                <div class="col-md-10">
                    <div class="input-group" style="width:100%;">
                        @Html.EditorFor(model => model.regla.ValorLimiteSuperior, new { htmlAttributes = new { @class = "form-control", @placeholder = "valor", @id = "txtReglaSuperior" } })
                        @Html.EditorFor(model => model.regla.ValorLimiteSuperior, new { htmlAttributes = new { @class = "form-control hidden", @placeholder = "valor", @id = "txtReglaSuperior2", @readonly = "readonly" } })
                        @Html.EditorFor(model => model.regla.ValorLimiteSuperior, new { htmlAttributes = new { @class = "form-control hidden", @placeholder = "valor", @id = "txtReglaSuperior3", @onkeypress = "return soloNumeros(event);", @maxlength="14"} })
                        @Html.EditorFor(model => model.regla.ValorLimiteSuperior, new { htmlAttributes = new { @class = "form-control hidden", @placeholder = "valor", @id = "txtReglaSuperior4", @onkeypress = "return soloNumerosDecimales(event);" , @maxlength="14"} })
                        @Html.ValidationMessageFor(model => model.regla.ValorLimiteSuperior)
                    </div>
                </div>
            </div>
        <hr>
            <div class="form-group">

                <div class="col-md-10">
                    <div class="input-group" style="width:400px;">

                        @if (Model.listaTipoNivelDetalle != null)
                        {
                            foreach (var opt in Model.listaTipoNivelDetalle)
                            {
                                <label class="radio-inline">
                                    @Html.RadioButton("rdNivelDetalle", opt.IdNivelDetalle, false, new { onchange = "rdNivelDetalleChange(this)" })
                                    @Html.Label(opt.Nombre)
                                </label>

                            }
                        }
                        <div class="form-group">

                            <div class="col-sm-10">
                                <div class="checkbox">
                                    @Html.CheckBox("ckNivelDetalleGenero", new { @id = "ckNivelDetalleGenero" }) Genero
                                </div>
                            </div>
                        </div>

                        <button type="button" onclick="limpiarDetallesAgrupacionRadios();" class="btn btn-danger" id="btnCancelarEditarNodo">Limpiar Opciones</button>
                    </div>
                </div>
            </div>

        </div>
    </div>

<script> 
    $(document).ready(function () {
        setTimeout(function () {
           
            $("#descDetalleAgrupacion").change(function () {
                alert("d");
            });
        }, 6000);
    });   
</script>

