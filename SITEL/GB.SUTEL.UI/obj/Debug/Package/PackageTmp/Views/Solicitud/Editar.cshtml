<script type="text/javascript">

    var allIndicadoresInicial = [];

    var allIndicadoresEditar = [];

    var allIndicadoresEditarEliminar = [];

    var arrayDeOperadoresSeleccionadosEditar = new Array();

    var arrayDeOperadoresSeleccionadosInicial = new Array();
</script>


@model GB.SUTEL.UI.Models.SolicitudViewModels

<div class="form-horizontal">

    <h4>Editar Solicitud</h4>
    <hr />

    <div id="alertaNoCriterios"
         class="alert alert-danger"
         style="display:none;"
         role="alert">

        <strong> Alerta! </strong>
        <p id="alertText"></p>
    </div>



    @if (@ViewBag.adventencia != null)
    {
        <div class="alert alert-warning" role="alert">
            <strong>Alerta!</strong> @ViewBag.adventencia
        </div>
    }
    <!-- Nav tabs -->
    <ul class="nav nav-tabs" role="tablist">
        <li role="presentation" class="active tabSolicitud"><a href="#solicitudindicador" aria-controls="solicitudindicador" role="tab" data-toggle="tab">Solicitud</a></li>
        <li role="presentation" class="tabIndicadores"><a href="#indicadores" aria-controls="indicadores" role="tab" data-toggle="tab">Indicadores</a></li>


    </ul>

    <!-- Tab panes -->
    <div>
        <div class="tab-content">
            <div role="tabpanel" class="tab-pane active" id="solicitudindicador">
                <br />
                <form id="formEditarSolicitud" method="post">

                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    @Html.HiddenFor(model => model.itemSolicitudIndicador.IdSolicitudIndicador, new { @Id = "txtIDSOLICITUDINDICADOR", @class = "form-control" })
                    <div class="form-group">
                        @Html.LabelFor(model => model.itemSolicitudIndicador.DescFormulario, new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.TextAreaFor(model => model.itemSolicitudIndicador.DescFormulario, new { @Id = "txtDESCFORMULARIO", @class = "form-control" })
                            <br />
                            @Html.ValidationMessageFor(model => model.itemSolicitudIndicador.DescFormulario, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    @*  *@


                    <div class="form-group">
                        @Html.LabelFor(model => model.itemSolicitudIndicador.FechaInicio, new { @class = "control-label col-md-2" })
                        <div class="col-md-10">

                            @Html.TextBoxFor(model => model.itemSolicitudIndicador.FechaInicio, "{0:dd/MM/yyyy}", new { @Id = "FechaInicio", @class = "form-control datefield", @readonly = "readonly" })
                            <br />
                            @Html.ValidationMessageFor(model => model.itemSolicitudIndicador.FechaInicio, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.itemSolicitudIndicador.FechaFin, new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.TextBoxFor(model => model.itemSolicitudIndicador.FechaFin, "{0:dd/MM/yyyy}", new { @Id = "FechaFin", @class = "form-control datefield", @readonly = "readonly" })

                            <br />
                            @Html.ValidationMessageFor(model => model.itemSolicitudIndicador.FechaFin, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.itemSolicitudIndicador.IdServicio, new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.DropDownListFor(model => model.itemSolicitudIndicador.IdServicio, (List<SelectListItem>)ViewBag.listaServicios, new { @Id = "txtIDSERVICIO", @class = "form-control", style = "width:100%", @disabled = "true" })
                            <br />
                            @Html.ValidationMessageFor(model => model.itemSolicitudIndicador.IdServicio, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.itemSolicitudIndicador.IdDireccion, new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.DropDownListFor(model => model.itemSolicitudIndicador.IdDireccion, (List<SelectListItem>)ViewBag.listaDirecciones, new { @Id = "cmdIDDIRECCION", @class = "form-control", style = "width:100%", @disabled = "true" })
                            <br />
                            @Html.ValidationMessageFor(model => model.itemSolicitudIndicador.IdDireccion, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.itemSolicitudIndicador.IdFrecuencia, new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.DropDownListFor(model => model.itemSolicitudIndicador.IdFrecuencia, (List<SelectListItem>)ViewBag.listaFrecuencias, new { @Id = "cmdIDFRECUENCIA", @class = "form-control", style = "width:100%", @disabled = "true", @onchange = "ddlFrecuenciaChange(this.selectedIndex)" })
                            <br />
                            @Html.ValidationMessageFor(model => model.itemSolicitudIndicador.IdFrecuencia, "", new { @class = "text-danger" })
                        </div>
                    </div>



                    @* Almacena el valor de la fecha base para crear Excel*@

                    @{

                        int mesBase = Model.itemSolicitudIndicador.FechaBaseParaCrearExcel.Month;
                        int annoBase = Model.itemSolicitudIndicador.FechaBaseParaCrearExcel.Year;


                        if (mesBase == 1)
                        {
                            mesBase = 12;
                            annoBase = annoBase - 1;
                        }
                        else
                        {
                            mesBase = mesBase - 1;

                        }

                    }


                    <div class="form-group hidden">
                        <div class="col-md-10">
                            <input id="txtHiddenMesBase" name="MesBase" value='@mesBase'>
                        </div>
                    </div>

                    <div class="form-group hidden">
                        <div class="col-md-10">
                            <input id="txtHiddenAnnoBase" name="AnnoBase" value='@annoBase'>
                        </div>
                    </div>




                    @*Select detalle Frecuencia Semestral*@

                    @{

                        List<SelectListItem> listItemsDetalleSemestral = new List<SelectListItem>();

                        listItemsDetalleSemestral.Add(new SelectListItem { Text = "<Seleccione>", Value = "-1", Selected = true });

                        listItemsDetalleSemestral.Add(new SelectListItem { Text = "l semestre", Value = "06" });

                        listItemsDetalleSemestral.Add(new SelectListItem { Text = "ll semestre", Value = "12" });

                    }

                    <div class="form-group hidden " id="divSemestral">
                        @Html.Label("Detalle Frecuencia", new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.DropDownList("slctDetalleSemestral", listItemsDetalleSemestral, new { @Id = "slctDetalleSemestral", @class = "form-control", style = "width:100%", onchange = "slctDetalleFrecuenciaChange(this)" })
                            <br />
                        </div>
                    </div>



                    @*Select detalle Frecuencia Cuatrimestral*@

                    @{

                        List<SelectListItem> listItemsCuatrimestral = new List<SelectListItem>();

                        listItemsCuatrimestral.Add(new SelectListItem { Text = "<Seleccione>", Value = "-1", Selected = true });

                        listItemsCuatrimestral.Add(new SelectListItem { Text = "enero, febrero, marzo y abril", Value = "04" });

                        listItemsCuatrimestral.Add(new SelectListItem { Text = "mayo, junio, julio y agosto", Value = "08" });

                        listItemsCuatrimestral.Add(new SelectListItem { Text = "septiembre, octubre, noviembre y diciembre", Value = "12" });



                    }

                    <div class="form-group hidden" id="divCuatrimestral">
                        @Html.Label("Detalle Frecuencia", new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.DropDownList("slctDetalleCuatrimestral", listItemsCuatrimestral, new { @Id = "slctDetalleCuatrimestral", @class = "form-control", style = "width:100%", onchange = "slctDetalleFrecuenciaChange(this)" })
                            <br />
                        </div>
                    </div>


                    @*Select detalle Frecuencia Cuatrimestral*@

                    @{

                        List<SelectListItem> listItemsTrimestral = new List<SelectListItem>();

                        listItemsTrimestral.Add(new SelectListItem { Text = "<Seleccione>", Value = "-1", Selected = true });

                        listItemsTrimestral.Add(new SelectListItem { Text = "l Trimestre", Value = "03" });

                        listItemsTrimestral.Add(new SelectListItem { Text = "ll Trimestre", Value = "06" });

                        listItemsTrimestral.Add(new SelectListItem { Text = "lll Trimestre", Value = "09" });

                        listItemsTrimestral.Add(new SelectListItem { Text = "lV Trimestre", Value = "12" });



                    }

                    <div class="form-group hidden" id="divTrimestral">
                        @Html.Label("Detalle Frecuencia", new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.DropDownList("slctDetalleTrimestral", listItemsTrimestral, new { @Id = "slctDetalleTrimestral", @class = "form-control", style = "width:100%", onchange = "slctDetalleFrecuenciaChange(this)" })
                            <br />
                        </div>
                    </div>



                    @*Select detalle Frecuencia Cuatrimestral*@

                    @{

                        List<SelectListItem> listItemsBimensual = new List<SelectListItem>();

                        listItemsBimensual.Add(new SelectListItem { Text = "<Seleccione>", Value = "-1", Selected = true });

                        listItemsBimensual.Add(new SelectListItem { Text = "enero y febrero", Value = "02" });

                        listItemsBimensual.Add(new SelectListItem { Text = "marzo y abril", Value = "04" });

                        listItemsBimensual.Add(new SelectListItem { Text = "mayo y junio", Value = "06" });

                        listItemsBimensual.Add(new SelectListItem { Text = "julio y agosto", Value = "08" });

                        listItemsBimensual.Add(new SelectListItem { Text = "septiembre y octubre", Value = "10" });

                        listItemsBimensual.Add(new SelectListItem { Text = "noviembre y diciembre", Value = "12" });



                    }

                    <div class="form-group hidden " id="divBimensual">
                        @Html.Label("Detalle Frecuencia", new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.DropDownList("slctDetalleBimensual", listItemsBimensual, new { @Id = "slctDetalleBimensual", @class = "form-control", style = "width:100%", onchange = "slctDetalleFrecuenciaChange(this)" })
                            <br />
                        </div>
                    </div>



                    @*Select detalle Frecuencia Cuatrimestral*@

                    @{

                        List<SelectListItem> listItemsMensual = new List<SelectListItem>();

                        listItemsMensual.Add(new SelectListItem { Text = "<Seleccione>", Value = "-1", Selected = true });

                        listItemsMensual.Add(new SelectListItem { Text = "enero", Value = "01" });

                        listItemsMensual.Add(new SelectListItem { Text = " febrero", Value = "02" });

                        listItemsMensual.Add(new SelectListItem { Text = "marzo", Value = "03" });

                        listItemsMensual.Add(new SelectListItem { Text = "abril", Value = "04" });

                        listItemsMensual.Add(new SelectListItem { Text = "mayo", Value = "05" });

                        listItemsMensual.Add(new SelectListItem { Text = "junio", Value = "06" });

                        listItemsMensual.Add(new SelectListItem { Text = "julio", Value = "07" });

                        listItemsMensual.Add(new SelectListItem { Text = "agosto", Value = "08" });

                        listItemsMensual.Add(new SelectListItem { Text = "septiembre", Value = "09" });

                        listItemsMensual.Add(new SelectListItem { Text = "octubre", Value = "10" });

                        listItemsMensual.Add(new SelectListItem { Text = "noviembre", Value = "11" });

                        listItemsMensual.Add(new SelectListItem { Text = "diciembre", Value = "12" });



                    }

                    <div class="form-group hidden " id="divMensual">
                        @Html.Label("Detalle Frecuencia", new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.DropDownList("slctDetalleMensual", listItemsMensual, new { @Id = "slctDetalleMensual", @class = "form-control", style = "width:100%", onchange = "slctDetalleFrecuenciaChange(this)" })
                            <br />
                        </div>
                    </div>


                    @*Select Año*@

                    @{

                        int annoActual = DateTime.Now.Year;
                        int annoMinimo = annoActual - 17;

                        List<SelectListItem> listItemsAnnos = new List<SelectListItem>();

                        listItemsAnnos.Add(new SelectListItem { Text = "<Seleccione>", Value = "-1", Selected = true });

                        while (annoActual > annoMinimo)
                        {

                            listItemsAnnos.Add(new SelectListItem { Text = annoActual.ToString(), Value = annoActual.ToString() });

                            annoActual--;
                        }

                    }

                    <div class="form-group">
                        @Html.Label("Año", new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.DropDownList("slctAnno", listItemsAnnos, new { @Id = "slctAnno", @class = "form-control", style = "width:100%", onchange = "slctAnnoChange(this)" })
                            <br />
                        </div>
                    </div>




                    <div class="form-group">
                        @Html.LabelFor(model => model.itemSolicitudIndicador.Activo, new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            <div class="checkbox">
                                <label>
                                    @if (Model.itemSolicitudIndicador.Activo == 1)
                                    {
                                        @Html.CheckBox("Activo", true)
                                    }
                                    else
                                    {
                                        @Html.CheckBox("Activo", false)
                                    }
                                </label>
                            </div>
                            <br />
                            @Html.ValidationMessageFor(model => model.itemSolicitudIndicador.Activo, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        <label class="control-label col-md-2">Salida Tipo</label>
                        <div class="col-md-10">
                            @if (Model.itemSolicitudIndicador.FormularioWeb == 1)
                            {
                                <div class="form-check">
                                    <input class="form-check-input" type="radio" name="radioCrearFormularioWebGroup" id="radioCrearFormularioWeb" checked>
                                    <label class="form-check-label" for="radioCrearFormularioWeb">
                                        Formulario Web
                                    </label>
                                </div>
                                <div class="form-check">
                                    <input class="form-check-input" type="radio" name="radioCrearFormularioWebGroup" id="radioCrearFormularioExcel">
                                    <label class="form-check-label" for="radioCrearFormularioExcel">
                                        Plantilla Excel
                                    </label>
                                </div>
                            }
                            else
                            {
                                <div class="form-check">
                                    <input class="form-check-input" type="radio" name="radioCrearFormularioWebGroup" id="radioCrearFormularioWeb">
                                    <label class="form-check-label" for="radioCrearFormularioWeb">
                                        Formulario Web
                                    </label>
                                </div>
                                <div class="form-check">
                                    <input class="form-check-input" type="radio" name="radioCrearFormularioWebGroup" id="radioCrearFormularioExcel" checked>
                                    <label class="form-check-label" for="radioCrearFormularioExcel">
                                        Plantilla Excel
                                    </label>
                                </div>
                            }
                        </div>

                    </div>



                    @*  *@


                    <br />
                    <div class="alert alert-danger hidden" role="alert" id="divMensajeErrorCrearSolicitud">
                        <span id="MyerrorMensaje"></span>
                    </div>
                    <div class="form-group">
                        <div class="col-sm-offset-3 col-sm-9">
                            @if (GB.SUTEL.UI.Helpers.rolValidation.ValidateScreenFunctions(this.Context, "Solicitud", "Editar"))
                            {
                                if (@ViewBag.adventencia == null)
                                {
                                    <button type="button" class="btn btn-success" id="btnEditarNuevaSolicitud" data-tooltip="true" title="Guardar los cambios de Indicadores">Guardar Cambios</button>
                                }
                            }
                            <a class="btn btn-danger" href="/Solicitud" role="button" data-tooltip="true" title="Cancelar los cambios de Indicadores">Cancelar</a>
                        </div>
                    </div>


                </form>
            </div>

            <div role="tabpanel" class="tab-pane" id="indicadores">
                <div id="vistaOperadores">
                    @{Html.RenderPartial("IndicadoresEditar", new Tuple<List<GB.SUTEL.Entities.Operador>, GB.SUTEL.UI.Models.SolicitudViewModels>(new List<GB.SUTEL.Entities.Operador>(), new GB.SUTEL.UI.Models.SolicitudViewModels()));}
                </div>
            </div>

        </div>

    </div>
</div>
<script>


    allIndicadoresEditar = @Html.Raw(Json.Encode(@ViewBag.listaIndicadores));
    allIndicadoresInicial = @Html.Raw(Json.Encode(@ViewBag.listaIndicadores));

    arrayDeOperadoresSeleccionadosEditar= @Html.Raw(Json.Encode(@ViewBag.listaOperadores));
    arrayDeOperadoresSeleccionadosInicial= @Html.Raw(Json.Encode(@ViewBag.listaOperadores));



    $(function () {
        $("#FechaInicio").datepicker({
            beforeShow: function (textbox, instance) {
                instance.dpDiv.css({
                    marginTop: (-textbox.offsetHeight) + 'px',
                    marginLeft: textbox.offsetWidth + 'px'
                });
            },
            onClose: function (selectedDate) {
                $("#FechaFin").datepicker("option", "minDate", selectedDate);
            }});
        $("#FechaFin").datepicker({
            beforeShow: function (textbox, instance) {
                instance.dpDiv.css({
                    marginTop: (-textbox.offsetHeight) + 'px',
                    marginLeft: textbox.offsetWidth + 'px'
                });
            }
        });
    });

    $("#Activo").click(function () {

        if ($(this).is(":checked"))
            $("#Activo").val("true");
        else
            $("#Activo").val("false");
    });

    $("#btnEditarNuevaSolicitud").click(function (e) {
        $("#formEditarSolicitud").submit();
    });

    $("#formEditarSolicitud").submit(function (e) {

        if (!$("#formEditarSolicitud").valid()) {
            return false;
        }

        // extrae los atributos del form
        var idSolicitudIndicador = $("#txtIDSOLICITUDINDICADOR").val();
        var descripcion = $("#txtDESCFORMULARIO").val();
        var fechaInicio = $("#FechaInicio").val();
        var fechaFinal = $("#FechaFin").val();
        var servicio = $("#txtIDSERVICIO").val();
        var direccion = $("#cmdIDDIRECCION").val();
        var frecuencia = $("#cmdIDFRECUENCIA").val();
        var nombreOperador = $("#filtrarOperador").val();
        var activo = $("#Activo").val();
        var formularioWeb = document.getElementById('radioCrearFormularioWeb').checked;
        var anno = AnnoDatosExcel;
        var ultimoMes = UltimoMes;

        var json = {
            "idSolicitudIndicador": idSolicitudIndicador,
            "descFormulario": descripcion,
            "fechaInicio": fechaInicio,
            "fechaFinal": fechaFinal,
            "idServicio": servicio,
            "idDireccion": direccion,
            "idFrecuencia": frecuencia,
            "activo": activo,
            "formularioWeb": formularioWeb,
            "NombreOperador": nombreOperador,
            "annoDatosExcel": anno,
            "ultimoMes": ultimoMes

        };

        var options = {
            type: "post",
            dataType: "json",
            url: "/Solicitud/Editar",
            data: { "data": json },
            success: function (data) {
                if (data.ok === "True") {
                    window.location = "/Solicitud?em=true";
                } else {
                    $("#divMensajeErrorCrearSolicitud").removeClass("hidden");
                    $("#divMensajeErrorCrearSolicitud").removeAttr('style');
                    $("#MyerrorMensaje").text(data.strMensaje);
                }
            },
            error: function (error) {
                window.location = "/Solicitud?em=true";
            }
        };

        $.ajax(options);
        e.preventDefault();
    });


    //#################################################################3

    $(".tabIndicadores").click(function () {
        var servicio = $("#txtIDSERVICIO").val();
        var direccion = $("#cmdIDDIRECCION").val();
        var frecuencia = $("#cmdIDFRECUENCIA").val();
        var idIndicador = $("#txtIDSOLICITUDINDICADOR").val();
        var nombreOperador = $("#filtrarOperador").val();
        var json = {
            "IdServicio": servicio,
            "IdDireccion": direccion,
            "IdFrecuencia": frecuencia,
            "IdIndicador": idIndicador,
            "NombreOperador": nombreOperador
        };

        var options = {
            type: "post",
            dataType: "json",
            data: { "data": json },
            url: "/Solicitud/IndicadoresEditar",
            success: function (data) {

                if (data.ok === "True") {
                    data = "<div id='vistaOperadores'>" + data + "</div>";

                    var $form = $(data);

                    $("#vistaOperadores").replaceWith(data);

                    $('table[data-table-grid="true"]').ready(initDataGrid);
                    initTable();
                    CargaBotonesOperadores();

                }
            },
            error: function (xhr, status, error) {
                if (xhr.readyState == 4) {
                    if (xhr.status == 200) {
                        var data = "<div id='vistaOperadores'>" + xhr.responseText + "</div>";

                        var $form = $(data);

                        $("#vistaOperadores").replaceWith(data);

                        $('table[data-table-grid="true"]').ready(initDataGrid);
                        //initTable();
                        CargaBotonesOperadores();
                    }
                }
            }
        };

        $.ajax(options);
    });

    //###############################################################
    function funcFiltrarOperador(event) {
        if (event.keyCode === 13) {
            var servicio = $("#txtIDSERVICIO").val();
            var direccion = $("#cmdIDDIRECCION").val();
            var frecuencia = $("#cmdIDFRECUENCIA").val();
            var idIndicador = $("#txtIDSOLICITUDINDICADOR").val();
            var nombreOperador = $("#filtrarOperador").val();
            var json = {
                "IdServicio": servicio,
                "IdDireccion": direccion,
                "IdFrecuencia": frecuencia,
                "IdIndicador": idIndicador,
                "NombreOperador": nombreOperador
            };

            var options = {
                type: "post",
                dataType: "json",
                data: { "data": json },
                url: "/Solicitud/IndicadoresEditar",
                success: function (data) {

                    if (data.ok === "True") {
                        data = "<div id='vistaOperadores'>" + data + "</div>";

                        var $form = $(data);

                        $("#vistaOperadores").replaceWith(data);

                        $('table[data-table-grid="true"]').ready(initDataGrid);
                        initTable();
                        CargaBotonesOperadores();

                    }
                },
                error: function (xhr, status, error) {
                    if (xhr.readyState == 4) {
                        if (xhr.status == 200) {
                            var data = "<div id='vistaOperadores'>" + xhr.responseText + "</div>";

                            var $form = $(data);

                            $("#vistaOperadores").replaceWith(data);

                            $('table[data-table-grid="true"]').ready(initDataGrid);
                            //initTable();
                            CargaBotonesOperadores();
                        }
                    }
                }
            };

            $.ajax(options);
        }
    }


    //#############################################################



    //Funcion se ejecuta al seleccionar un Indicador
   /* function AgregarNuevoIndicadorEditar(id) {



        var element = $("#checkIndicador_" + id);
        // var elementOperador = $(this).attr('data-json-selected');
       // var elementOperador = $("#IdOperadorSeleccionadoEditar").val();
        var valueOrden = $("#ordenIndicador_" + id).val();
        var valueChecked = element.prop('checked');





        var inList = false;
        var indexArray = null;
        var inListEliminar = false;
        var indexArrayEliminar = null;
        for (var i = 0; i < allIndicadoresEditar.length; i++) {
            if (allIndicadoresEditar[i] == (elementOperador + '|' + id)) {
                inList = true;
                indexArray = i;
                break;
            }
        }

        //eliminar
        for (var i = 0; i < allIndicadoresEditarEliminar.length; i++) {
            if (allIndicadoresEditarEliminar[i] == (elementOperador + '|' + id)) {
                inListEliminar = true;
                indexArrayEliminar = i;
                break;
            }
        }
        //
        if (!inList && valueChecked) {
            allIndicadoresEditar.push(elementOperador + '|' + id);
        }
        else {
            if (inList && !valueChecked) {
                allIndicadoresEditar.splice(indexArray, 1);
            }
        }

        //
        if (!inListEliminar && !valueChecked) {
            allIndicadoresEditarEliminar.push(elementOperador + '|' + id);
        }
        else {
            if (inListEliminar && valueChecked) {
                allIndicadoresEditarEliminar.splice(indexArrayEliminar, 1);
            }
        }
    };*/

    //-------------------Modificado------------------------
    //#############################################################
    //Funcion se ejecuta al seleccionar un Indicador
    // Modificado por Digo Navarrete
    //08/04/2016
    function AgregarNuevoIndicadorEditar(id) {

        var element = $("#checkIndicador_" + id);
        // var elementOperador = $("#IdOperadorSeleccionado").val();
        var valueChecked = element.prop('checked');
        var valueOrden = $("#ordenIndicador_" + id).val();
        if (valueChecked && valueOrden != null && valueOrden != "") {

            var inList = false;
            var indexArray = null;
            for (var i = 0; i < allIndicadoresEditar.length; i++) {

                if (allIndicadoresEditar[i].split("|")[0] == id) {
                    inList = true;
                    indexArray = i;
                    //alert("Orden" + i);
                    break;
                }
            }
            if (!inList && valueChecked && valueOrden != "" && valueOrden != null) {
                allIndicadoresEditar.push(id + '|' + valueOrden);

            }

        } else {

            var inList = false;
            var indexArray = null;
            for (var i = 0; i < allIndicadoresEditar.length; i++) {

                if (allIndicadoresEditar[i].split("|")[0] == id) {
                    inList = true;
                    indexArray = i;
                    break;
                }
            }
            if (inList && !valueChecked) {
                allIndicadoresEditar.splice(indexArray, 1);
                var valueOrden = $("#ordenIndicador_" + id).val("");
                $("#checkIndicador_" + id).prop("disabled", true);
            }

        }

    };

    function tdClick(id) {


        // extrae los atributos del form
        var IdSolicitudIndicador = $("#txtIDSOLICITUDINDICADOR").val();
        var IdOperador = $(this).attr('data-json-selected');
        $("#IdOperadorSeleccionadoEditar").val(IdOperador);
        var json = {
            "IdIndicador": IdSolicitudIndicador,
            "IdOperador": id
        }

        var options = {
            type: "post",
            dataType: "json",
            url: "/Solicitud/IndicadoresXOperadorXRegistro",
            data: { "data": json },
            success: function (data) {
                if (data.ok == "True") {
                    loadIndicador(data);
                }
            },
            error: function (error) {

            }
        };

        $.ajax(options);

    }


    function CargaBotonesOperadores() {
        $(".cmdOperadorSeleccionado").click(function () {
            //$(input[id ^= 'cmdOperadorSeleccionado']).each(function (index) {


            // extrae los atributos del form
            var IdSolicitudIndicador = $("#txtIDSOLICITUDINDICADOR").val();
            var IdOperador = $(this).attr('data-json-selected');
            $("#IdOperadorSeleccionadoEditar").val(IdOperador);
            var json = {
                "IdIndicador": IdSolicitudIndicador,
                "IdOperador": IdOperador
            }

            var options = {
                type: "post",
                dataType: "json",
                url: "/Solicitud/IndicadoresXOperadorXRegistro",
                data: { "data": json },
                success: function (data) {
                    if (data.ok == "True") {
                        loadIndicador(data);
                    }
                },
                error: function (error) {

                }
            };

            $.ajax(options);

        });
    }

    function checkSupportForInputTypeDate() {
        jQuery.validator.methods.date = function (value, element) {
            if (value) {
                try {
                    value = value.replace(/\//g, "-");
                    //var val = Date.parse(value, 'd/M/yyyy');
                    //if (isNaN(val)) return false;
                    //var result = value.match(/^dd?-dd?-dd$/);;
                    //return result;
                    var date = $.datepicker.parseDate('dd-mm-yy', value);
                    //$.datepicker.parseDate('dd-mm-yyyy', value);
                } catch (ex) {
                    $(element).val('');
                    return false;
                }
            }
            return true;
        };
    }
    $(document).ready(function () {
        checkSupportForInputTypeDate();

        prepararSelectDetalleFrecuencia();


        $("#")

    });



    function prepararSelectDetalleFrecuencia(){

        var selectFrecuencia =  document.getElementById("cmdIDFRECUENCIA");

        ddlFrecuenciaChange(selectFrecuencia.selectedIndex);



        var  mesBase = $("#txtHiddenMesBase").val();

        var  annoBase = $("#txtHiddenAnnoBase").val();

        $("#slctAnno").val(annoBase);


        establecerDetalleFrecuencia(selectFrecuencia.selectedIndex, mesBase);


    }



    //#############################################################
    //Funcion se ejecuta al seleccionar numero de orden
    /// Metodo creador Diego Navarrete
    /// modificado 06/04/2016
    function OnOrderChangeEditar(input, id) {
        console.log('entro');

        //debugger;

        var value = input.value;


        if (value < 0) {
            var valueOrden = $("#ordenIndicador_" + id).val("");
            $("#checkIndicador_" + id).prop("disabled", true);
            return false;
        }

        if (!value.indexOf('.') == -1 || value == "" || value % 1 != 0 ) {
            var valueOrden = $("#ordenIndicador_" + id).val("");
            $("#checkIndicador_" + id).prop("disabled", true);
            return false;
        }





        if (value == "" || value == null) {

            $("#checkIndicador_" + id).prop("disabled", true);

            for (var i = 0; i < allIndicadoresEditar.length; i++) {

              //  alert(allIndicadoresEditar);


                if (allIndicadoresEditar[i].split("|")[0] == id) {
                    allIndicadoresEditar.splice(i, 1);
                    $("#checkIndicador_" + id).prop("checked", false);
                    break;
                }
            }


        } else {

            $("#checkIndicador_" + id).prop("disabled", false);

            for (var i = 0; i < allIndicadoresEditar.length; i++) {

                if (allIndicadoresEditar[i].split("|")[0] == id) {
                    var valueOrden = $("#ordenIndicador_" + id).val();
                    allIndicadoresEditar[i] = allIndicadoresEditar[i].split("|")[0] + "|" + valueOrden;
                    console.log(allIndicadoresEditar);
                    break;
                }
            }
        }
    }





    var AnnoDatosExcel = -1;
    var UltimoMes = -1;

    function slctAnnoChange(select) {

        AnnoDatosExcel = select.options[select.selectedIndex].value;
    }


    function slctDetalleFrecuenciaChange(select) {


        UltimoMes = select.options[select.selectedIndex].value;

    }


    function ddlFrecuenciaChange(idItemSelected) {

        $("#divBimensual").addClass('hidden');
        $("#divCuatrimestral").addClass('hidden');
        $("#divMensual").addClass('hidden');
        $("#divSemestral").addClass('hidden');
        $("#divTrimestral").addClass('hidden');



        switch(idItemSelected){
            case 1: //Anual
                UltimoMes = -2;

                break;

            case 2: //Bimensual
                $("#divBimensual").removeClass('hidden');
                break;

            case 3: //Cuatrimestral
                $("#divCuatrimestral").removeClass('hidden');

                break;

            case 4: //Mensual
                $("#divMensual").removeClass('hidden');
                break;

            case 5: //Semestral
                $("#divSemestral").removeClass('hidden');
                break;

            case 6: //Trimestral
                $("#divTrimestral").removeClass('hidden');
                break;

            default:




        }

    }



    function establecerDetalleFrecuencia(idFrecuenciaSelected, value) {

        //debugger;

        if(value<10)
            value = "0"+value;

        switch(idFrecuenciaSelected){

            case 2: //Bimensual
                $("#slctDetalleBimensual").val(value);
                break;

            case 3: //Cuatrimestral
                $("#slctDetalleCuatrimestral").val(value);

                break;

            case 4: //Mensual
                $("#slctDetalleMensual").val(value);
                break;

            case 5: //Semestral
                $("#slctDetalleSemestral").val(value);
                break;

            case 6: //Trimestral
                $("#slctDetalleTrimestral").val(value);
                break;

            default:




        }

    }

</script>
